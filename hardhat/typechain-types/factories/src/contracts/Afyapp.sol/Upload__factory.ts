/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Upload,
  UploadInterface,
} from "../../../../src/contracts/Afyapp.sol/Upload";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "allow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "disallow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "display",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "shareAccess",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "bool",
            name: "access",
            type: "bool",
          },
        ],
        internalType: "struct Upload.Access[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061092c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806336d6da551461005c578063a9ed9cb814610071578063bc8bef8114610084578063eb39113f146100a2578063ff9913e8146100c2575b600080fd5b61006f61006a3660046105a1565b6100d5565b005b61006f61007f366004610663565b61010a565b61008c6101f1565b6040516100999190610685565b60405180910390f35b6100b56100b0366004610663565b610274565b60405161009991906106df565b61006f6100d0366004610663565b6103e0565b6001600160a01b0382166000908152602081815260408220805460018101825590835291200161010582826107f9565b505050565b3360009081526001602090815260408083206001600160a01b03851684529091528120805460ff191690555b336000908152600260205260409020548110156101ed5733600090815260026020526040902080546001600160a01b03841691908390811061017a5761017a6108b9565b6000918252602090912001546001600160a01b0316036101db573360009081526002602052604081208054839081106101b5576101b56108b9565b60009182526020909120018054911515600160a01b0260ff60a01b199092169190911790555b806101e5816108cf565b915050610136565b5050565b336000908152600260209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561026b57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900460ff16151581830152825260019092019101610220565b50505050905090565b60606001600160a01b0382163314806102b057506001600160a01b038216600090815260016020908152604080832033845290915290205460ff165b6102f85760405162461bcd60e51b8152602060048201526015602482015274596f7520646f6e277420686176652061636365737360581b604482015260640160405180910390fd5b6001600160a01b03821660009081526020818152604080832080548251818502810185019093528083529193909284015b828210156103d557838290600052602060002001805461034890610771565b80601f016020809104026020016040519081016040528092919081815260200182805461037490610771565b80156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b505050505081526020019060010190610329565b505050509050919050565b3360008181526001602081815260408084206001600160a01b038716808652908352818520805460ff19169094179093559383526003815283832091835252205460ff16156104e75760005b336000908152600260205260409020548110156101ed5733600090815260026020526040902080546001600160a01b038416919083908110610470576104706108b9565b6000918252602090912001546001600160a01b0316036104d557336000908152600260205260409020805460019190839081106104af576104af6108b9565b60009182526020909120018054911515600160a01b0260ff60a01b199092169190911790555b806104df816108cf565b91505061042c565b336000818152600260209081526040808320815180830183526001600160a01b03878116808352600183870181815285548083018755958952878920945194909501805495511515600160a01b026001600160a81b03199096169490931693909317939093179055948452600383528184209084529091529020805460ff1916909117905550565b80356001600160a01b038116811461058657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156105b457600080fd5b6105bd8361056f565b9150602083013567ffffffffffffffff808211156105da57600080fd5b818501915085601f8301126105ee57600080fd5b8135818111156106005761060061058b565b604051601f8201601f19908116603f011681019083821181831017156106285761062861058b565b8160405282815288602084870101111561064157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561067557600080fd5b61067e8261056f565b9392505050565b602080825282518282018190526000919060409081850190868401855b828110156106d257815180516001600160a01b0316855286015115158685015292840192908501906001016106a2565b5091979650505050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561076357888603603f1901855282518051808852835b8181101561073c578281018a01518982018b01528901610721565b508781018901849052601f01601f1916909601870195509386019391860191600101610707565b509398975050505050505050565b600181811c9082168061078557607f821691505b6020821081036107a557634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561010557600081815260208120601f850160051c810160208610156107d25750805b601f850160051c820191505b818110156107f1578281556001016107de565b505050505050565b815167ffffffffffffffff8111156108135761081361058b565b610827816108218454610771565b846107ab565b602080601f83116001811461085c57600084156108445750858301515b600019600386901b1c1916600185901b1785556107f1565b600085815260208120601f198616915b8281101561088b5788860151825594840194600190910190840161086c565b50858210156108a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000600182016108ef57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e69e4ff5b3fa2a9036456046d1c242f39689619ded16a206513be6be3e3c790964736f6c63430008110033";

type UploadConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UploadConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Upload__factory extends ContractFactory {
  constructor(...args: UploadConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Upload> {
    return super.deploy(overrides || {}) as Promise<Upload>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Upload {
    return super.attach(address) as Upload;
  }
  override connect(signer: Signer): Upload__factory {
    return super.connect(signer) as Upload__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UploadInterface {
    return new utils.Interface(_abi) as UploadInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Upload {
    return new Contract(address, _abi, signerOrProvider) as Upload;
  }
}
