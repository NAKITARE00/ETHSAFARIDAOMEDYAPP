/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AppointmentManagementInterface extends utils.Interface {
  functions: {
    "appointments(uint256)": FunctionFragment;
    "approveAppointment(uint256)": FunctionFragment;
    "cancelAppointment(uint256)": FunctionFragment;
    "nextAppointmentId()": FunctionFragment;
    "requestAppointment(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "appointments"
      | "approveAppointment"
      | "cancelAppointment"
      | "nextAppointmentId"
      | "requestAppointment"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "appointments",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveAppointment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAppointment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAppointmentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestAppointment",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "appointments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveAppointment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAppointment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAppointmentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAppointment",
    data: BytesLike
  ): Result;

  events: {
    "AppointmentApproved(uint256,address,address,uint256)": EventFragment;
    "AppointmentCanceled(uint256,address,address,uint256)": EventFragment;
    "AppointmentRequested(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppointmentApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppointmentCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppointmentRequested"): EventFragment;
}

export interface AppointmentApprovedEventObject {
  appointmentId: BigNumber;
  patient: string;
  doctor: string;
  timestamp: BigNumber;
}
export type AppointmentApprovedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  AppointmentApprovedEventObject
>;

export type AppointmentApprovedEventFilter =
  TypedEventFilter<AppointmentApprovedEvent>;

export interface AppointmentCanceledEventObject {
  appointmentId: BigNumber;
  patient: string;
  doctor: string;
  timestamp: BigNumber;
}
export type AppointmentCanceledEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  AppointmentCanceledEventObject
>;

export type AppointmentCanceledEventFilter =
  TypedEventFilter<AppointmentCanceledEvent>;

export interface AppointmentRequestedEventObject {
  appointmentId: BigNumber;
  patient: string;
  doctor: string;
  timestamp: BigNumber;
}
export type AppointmentRequestedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  AppointmentRequestedEventObject
>;

export type AppointmentRequestedEventFilter =
  TypedEventFilter<AppointmentRequestedEvent>;

export interface AppointmentManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AppointmentManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    appointments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, number] & {
        id: BigNumber;
        patient: string;
        doctor: string;
        timestamp: BigNumber;
        status: number;
      }
    >;

    approveAppointment(
      _appointmentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAppointment(
      _appointmentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextAppointmentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestAppointment(
      _doctor: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  appointments(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, number] & {
      id: BigNumber;
      patient: string;
      doctor: string;
      timestamp: BigNumber;
      status: number;
    }
  >;

  approveAppointment(
    _appointmentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAppointment(
    _appointmentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextAppointmentId(overrides?: CallOverrides): Promise<BigNumber>;

  requestAppointment(
    _doctor: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    appointments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, number] & {
        id: BigNumber;
        patient: string;
        doctor: string;
        timestamp: BigNumber;
        status: number;
      }
    >;

    approveAppointment(
      _appointmentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAppointment(
      _appointmentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nextAppointmentId(overrides?: CallOverrides): Promise<BigNumber>;

    requestAppointment(
      _doctor: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AppointmentApproved(uint256,address,address,uint256)"(
      appointmentId?: null,
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AppointmentApprovedEventFilter;
    AppointmentApproved(
      appointmentId?: null,
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AppointmentApprovedEventFilter;

    "AppointmentCanceled(uint256,address,address,uint256)"(
      appointmentId?: null,
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AppointmentCanceledEventFilter;
    AppointmentCanceled(
      appointmentId?: null,
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AppointmentCanceledEventFilter;

    "AppointmentRequested(uint256,address,address,uint256)"(
      appointmentId?: null,
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AppointmentRequestedEventFilter;
    AppointmentRequested(
      appointmentId?: null,
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AppointmentRequestedEventFilter;
  };

  estimateGas: {
    appointments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveAppointment(
      _appointmentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAppointment(
      _appointmentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextAppointmentId(overrides?: CallOverrides): Promise<BigNumber>;

    requestAppointment(
      _doctor: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    appointments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveAppointment(
      _appointmentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAppointment(
      _appointmentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextAppointmentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestAppointment(
      _doctor: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
