/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface RecordAccessInterface extends utils.Interface {
  functions: {
    "authorizedDoctors(address,address)": FunctionFragment;
    "grantAccessToDoctor(address)": FunctionFragment;
    "requestAccessToPatientRecords(address)": FunctionFragment;
    "viewPatientRecords(address)": FunctionFragment;
    "viewPatientRecordsImage(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorizedDoctors"
      | "grantAccessToDoctor"
      | "requestAccessToPatientRecords"
      | "viewPatientRecords"
      | "viewPatientRecordsImage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizedDoctors",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccessToDoctor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestAccessToPatientRecords",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewPatientRecords",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewPatientRecordsImage",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedDoctors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccessToDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAccessToPatientRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPatientRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPatientRecordsImage",
    data: BytesLike
  ): Result;

  events: {
    "AccessGranted(address,address)": EventFragment;
    "AccessRequested(address,address)": EventFragment;
    "PatientRecordsViewed(address,uint256,uint256)": EventFragment;
    "patientImageViewed(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccessGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccessRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PatientRecordsViewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "patientImageViewed"): EventFragment;
}

export interface AccessGrantedEventObject {
  patient: string;
  doctor: string;
}
export type AccessGrantedEvent = TypedEvent<
  [string, string],
  AccessGrantedEventObject
>;

export type AccessGrantedEventFilter = TypedEventFilter<AccessGrantedEvent>;

export interface AccessRequestedEventObject {
  patient: string;
  doctor: string;
}
export type AccessRequestedEvent = TypedEvent<
  [string, string],
  AccessRequestedEventObject
>;

export type AccessRequestedEventFilter = TypedEventFilter<AccessRequestedEvent>;

export interface PatientRecordsViewedEventObject {
  patient: string;
  patientheight: BigNumber;
  patientweight: BigNumber;
}
export type PatientRecordsViewedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PatientRecordsViewedEventObject
>;

export type PatientRecordsViewedEventFilter =
  TypedEventFilter<PatientRecordsViewedEvent>;

export interface patientImageViewedEventObject {
  patient_Image: string;
}
export type patientImageViewedEvent = TypedEvent<
  [string],
  patientImageViewedEventObject
>;

export type patientImageViewedEventFilter =
  TypedEventFilter<patientImageViewedEvent>;

export interface RecordAccess extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RecordAccessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizedDoctors(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    grantAccessToDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestAccessToPatientRecords(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewPatientRecords(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewPatientRecordsImage(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  authorizedDoctors(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  grantAccessToDoctor(
    _doctor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestAccessToPatientRecords(
    _patient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewPatientRecords(
    _patient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewPatientRecordsImage(
    _patient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorizedDoctors(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    grantAccessToDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestAccessToPatientRecords(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    viewPatientRecords(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    viewPatientRecordsImage(
      _patient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AccessGranted(address,address)"(
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null
    ): AccessGrantedEventFilter;
    AccessGranted(
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null
    ): AccessGrantedEventFilter;

    "AccessRequested(address,address)"(
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null
    ): AccessRequestedEventFilter;
    AccessRequested(
      patient?: PromiseOrValue<string> | null,
      doctor?: PromiseOrValue<string> | null
    ): AccessRequestedEventFilter;

    "PatientRecordsViewed(address,uint256,uint256)"(
      patient?: PromiseOrValue<string> | null,
      patientheight?: null,
      patientweight?: null
    ): PatientRecordsViewedEventFilter;
    PatientRecordsViewed(
      patient?: PromiseOrValue<string> | null,
      patientheight?: null,
      patientweight?: null
    ): PatientRecordsViewedEventFilter;

    "patientImageViewed(string)"(
      patient_Image?: null
    ): patientImageViewedEventFilter;
    patientImageViewed(patient_Image?: null): patientImageViewedEventFilter;
  };

  estimateGas: {
    authorizedDoctors(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAccessToDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestAccessToPatientRecords(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewPatientRecords(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewPatientRecordsImage(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizedDoctors(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAccessToDoctor(
      _doctor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestAccessToPatientRecords(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewPatientRecords(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewPatientRecordsImage(
      _patient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
